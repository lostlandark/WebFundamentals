---
layout: article
title: "PageSpeed规则以及建议"
description: "PageSpeed规则总结：优化关键的渲染路径是需要注意什么以及为什么这样做。"
introduction: "PageSpeed规则总结：优化关键的渲染路径是需要注意什么以及为什么这样做。"
article:
  written_on: 2014-04-01
  updated_on: 2014-04-28
  order: 8
collection: critical-rendering-path
---
{% wrap content %}

## 去除阻碍仍显的JavaScript脚本和CSS

为了最快进行第一次页面呈现，你试图减小并（如果可能）去除页面上关键资源的数量，减少下载关键字节数，并优化关键路径长度。

## 优化JavaScript的使用

Javascript资源在默认情况下阻塞解析器除非标志为异步或者通过一个特殊的Javascript片段进行添加。解析器阻塞Javascript会强制浏览器等待CSSOM并暂停DOM的生成，这些就大大延迟了页面第一次呈现的时间。

### **偏向异步JavaScript资源**

异步资源不会阻塞文档解析器并允许浏览器在执行脚本前避免CSSOM阻塞。通常，如果脚本设为异步，这也意味着它在第一次渲染呈现时并不是必需的——在最初呈现后再考虑异步的脚本。

### **推迟解析JavaScript**

任何对构建初始页面可见内容不关键不必要的脚本应当延迟以减少浏览器呈现页面的工作量。

### **避免长时间运行JavaScript**

长时间运行的JavaScript阻碍浏览器生成DOM，CSSOM，以及页面呈现。因此，任何初始化逻辑以及功能不是第一次呈现必需的话就应该推迟。如果一个较长的初始化队列需要运行，考虑将它划分成多个阶段依次保证浏览器能处理其他事件。

## 优化CSS使用

构建呈现树结构时CSS是必需的并且Javascript通常会在初始化页面过程中阻碍CSS。你需要保证任何不必要的CSS被标记为非关键的（例如打印和其他媒体查询），而关键的CSS以及传输的时间就尽可能小。

### **放置CSS在页头**

所有CSS资源应该尽可能早的在HTML文档中指定这样浏览器能够发现`<link>`标签并尽快地调度CSS请求。

### **避免CSS导入**

CSS导入 (@import) 指令允许一个样式表下从另一个样式表文件中导入样式规则。然而，这些指令应当避免由于他们引入了额外的关键路径往返：这些导入的CSS资源仅在这些用@import规则CSS样式表被接收并解析后才会被发现。

### **内联阻碍渲染的CSS**

为了最佳性能，你可能考虑将关键样式直接内联到HTML文档中。这样消除了额外的关键路径往返以及如果这样成功了就能完成一个关键路径长度的往返，仅当这些HTML代码是一种阻塞资源时。

{% include modules/nextarticle.liquid %}

{% endwrap%}
